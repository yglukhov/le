#if !defined SL_LE_core_script_base_slCSokriptVM_hp
#define SL_LE_core_script_base_slCSokriptVM_hp

#include <le/core/slCNumber.h>
#include <le/core/slCData.h>
#include "slCSokriptInstruction.hp"

namespace sokira
{
	namespace le
	{

template<typename T>
struct SokriptVMStack
{
	inline void push(T obj)
	{
		mBuffer.push_back(obj);
	}

	inline T pop()
	{
		LE_ASSERT(position());
		T result = mBuffer[mBuffer.size() - 1];
		mBuffer.pop_back();
		return result;
	}

	inline void increase(UInt32 bySize)
	{
		mBuffer.resize(mBuffer.size() + bySize);
	}

	inline void decrease(UInt32 bySize)
	{
		mBuffer.resize(mBuffer.size() - bySize);
	}

	inline T objectAtIndex(UInt32 pos)
	{
		return mBuffer[pos];
	}

	inline void setObjectAtIndex(UInt32 pos, T obj)
	{
		mBuffer[pos] = obj;
	}

	inline UInt32 position()
	{
		return mBuffer.size();
	}

	std::vector<T> mBuffer;
};

class CSokriptVM
{
	public:
		CSokriptVM();

		CObject::Ptr performByteCode(const UInt8* startPos = NULL);

		void reset();

		void setBytecode(const CData::Ptr bytecode)
		{
			mBytecode = bytecode;
		}

		void setExternalObjects(std::map<CString, CObject::Ptr>* objects)
		{
			mAllExternalObjects = objects;
		}

	private:
		template <EInstruction>
		inline void handleInstruction()
		{
			LE_ASSERT(false);
		}

		template <template <typename> class>
		inline void operateObjects();

		template <template <typename> class>
		inline void arithmeticOperation();

		const UInt8* mCode;
		SokriptVMStack<CObject::Ptr> mVarStack;
		UInt32 mCurrentStackLine;

		std::vector<CObject::Ptr> mExternalObjects;
		std::map<CString, CObject::Ptr>* mAllExternalObjects;

		CData::Ptr mBytecode;

		friend class CInternalFunction;
};

	} // namespace le
} // namespace sokira

#endif // not defined SL_LE_core_script_base_slCSokriptVM_hp
