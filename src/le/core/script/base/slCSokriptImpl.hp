#if !defined SL_LE_core_script_base_slCSokriptImpl_hp
#define SL_LE_core_script_base_slCSokriptImpl_hp

#include <iosfwd>
#include <le/core/slCData.h>
#include "slCSokriptInstruction.hp"

namespace sokira
{
	namespace le
	{

class CSokriptFlexLexer;

class CSokriptImpl
{
	public:
		CSokriptImpl();
		~CSokriptImpl();

		void addFunction(const CString& name, CObject* (*function)(CObject*));

		void runBytecode(const CData& bytecode);
		void compileFromStream(std::istream& input, std::ostream& output);

	private:

		CSokriptFlexLexer* mLexer;

	public:

		// Lex mediator
		int lex(void*, void*);

		// Error handlers
		void parse_error(const void*, const void*);
		void lex_error(const char*, const void*);

		void setInstruction(CSokriptInstruction::Ptr instruction);

		// Arithmetic actions
		CObject* addObjects(CObject* left, CObject* right);
//		CObject* substractObjects(CObject* left, CObject* right);
//		CObject* multiplyObjects(CObject* left, CObject* right);
//		CObject* divideObjects(CObject* left, CObject* right);
//		CObject* negateObject(CObject* obj);


		// Code generation methods
		CSokriptInstruction* pushConstantInstruction(CObject* theConstant);

	private:
		CSokriptInstruction::Ptr mInstruction;
};

	} // namespace le
} // namespace sokira

#endif // not defined SL_LE_core_script_base_slCSokriptImpl_hp
