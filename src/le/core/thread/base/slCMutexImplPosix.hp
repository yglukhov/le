#pragma once

#include <pthread.h>

namespace sokira
{
	namespace le
	{


class CMutexImpl
{
	public:
		inline CMutexImpl(bool recursive = false)
		{
			if (recursive)
			{
				// Creating RECURSIVE mutex
				pthread_mutexattr_t attr;
				pthread_mutexattr_init(&attr);
				pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);

				pthread_mutex_init(&mMutex, &attr);

				pthread_mutexattr_destroy(&attr);
			}
			else
			{
				// Creating NORMAL mutex
				pthread_mutex_init(&mMutex, NULL);
			}
		}

		inline ~CMutexImpl()
		{
			pthread_mutex_destroy(&mMutex);
		}

		inline void lock()
		{
			pthread_mutex_lock(&mMutex);
		}

		inline void unlock()
		{
			pthread_mutex_unlock(&mMutex);
		}

	private:
		pthread_mutex_t mMutex;
};


	} // namespace le
} // namespace sokira
