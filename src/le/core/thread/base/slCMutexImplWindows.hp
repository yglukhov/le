#pragma once

#include <windows.h>
#include <le/core/slTypes.h>

namespace sokira
{
	namespace le
	{

class CMutexImpl
{
	public:
		inline CMutexImpl()
		{
			InitializeCriticalSection(&mMutex);
		}

		inline ~CMutexImpl()
		{
			DeleteCriticalSection(&mMutex);
		}

		virtual void lock()
		{
			EnterCriticalSection(&mMutex);
		}

		virtual void unlock()
		{
			LeaveCriticalSection(&mMutex);
		}

	private:
		CRITICAL_SECTION mMutex;
};

class CRecursiveMutexImpl : public CMutexImpl
{
	public:
		inline CRecursiveMutexImpl() :
			mThreadID(0),
			mEntries(0)
		{

		}

		virtual void lock()
		{
			DWORD curThread = GetCurrentThreadId();

			if (curThread != mThreadID)
			{
				CMutexImpl::lock();
				mThreadID = curThread;
			}

			++mEntries;
		}

		virtual void unlock()
		{
			--mEntries;
			if (!mEntries)
			{
				mThreadID = 0;
				CMutexImpl::unlock();
			}
		}

	private:
		DWORD mThreadID;
		UInt32 mEntries;
};

	} // namespace le
} // namespace sokira
