#if !defined SL_LE_core_thread_base_slCThreadImplBase_hp
#define SL_LE_core_thread_base_slCThreadImplBase_hp


#include <le/core/template/function/slTCFunction.h>
#include <le/core/auxiliary/slCRunLoop.h>
#include <le/core/slCString.h>
#include <le/core/strategies/slCSimpleRefCountable.h>

namespace sokira
{
	namespace le
	{

class CThreadImplBase : public CSimpleRefCountable
{
	public:
		inline CThreadImplBase(const TCFunction<>& threadProc,
							   const CString& threadName) :
			mName(threadName),
			mThreadProc(threadProc)
		{

		}

		inline CThreadImplBase() :
			mName(LESTR("main"))
		{

		}

		virtual ~CThreadImplBase()
		{
			// Clear singletone map
			for (std::map<CString, std::pair<void*, void(*)(void*)> >::iterator it = mSingletones.begin(); it != mSingletones.end(); ++it)
			{
				(it->second.second)(it->second.first);
			}
		}

		// Overload this method to start CThreadImplBase::threadProc in a separate thread.
		virtual void start() = 0;

		inline CString name() const
		{
			return mName;
		}

		// The thread impl must call this proc
		inline static void threadProc(CThreadImplBase* impl)
		{
			impl->retain();
			try
			{
				impl->_threadProc();
			}
			catch(...)
			{
				// TODO: Complete correct error handling
			}
			impl->release();
		}

		void* singletone(const char* stdTypeName, void*(*creator)(), void (*deleter)(void*))
		{
			std::map<CString, std::pair<void*, void(*)(void*)> >::iterator it = mSingletones.find(stdTypeName);
			if (it == mSingletones.end())
			{
				mSingletones.insert(std::make_pair(CString(stdTypeName), std::make_pair(creator(), deleter)));
			}
			return mSingletones[stdTypeName].first;
		}

		CRunLoop mRunLoop;

	private:

		inline void _threadProc()
		{
			if (mThreadProc) mThreadProc();
		}

		CString mName;
		std::map<CString, std::pair<void*, void(*)(void*)> > mSingletones;
		TCFunction<> mThreadProc;
};

	} // namespace le
} // namespace sokira

#endif // not defined SL_LE_core_thread_base_slCThreadImplBase_hp
