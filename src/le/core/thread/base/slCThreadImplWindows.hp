#pragma once

#include <windows.h>
#include "slCThreadImplBase.hp"

namespace sokira
{
	namespace le
	{

class CThreadImplWindows : public CThreadImplBase
{
	public:
		inline CThreadImplWindows(const TCFunction<>& threadProc,
								const CString& threadName) :
			CThreadImplBase(threadProc, threadName)
		{
			threadList().push_back(this);
		}

		inline CThreadImplWindows(DWORD id) :
			mThreadID(id)
		{

		}

		~CThreadImplWindows()
		{
			for (std::list<CThreadImplWindows*>::iterator it = threadList().begin(); it != threadList().end(); ++it)
			{
				if (*it == this)
				{
					threadList().erase(it);
					return;
				}
			}
		}

		virtual void start();

		static CThreadImplBase* thread();

	protected:
		DWORD mThreadID;
	private:
		HANDLE mThread;

		static std::list<CThreadImplWindows*>& threadList()
		{
			static std::list<CThreadImplWindows*> mRegisteredThreads;
			return mRegisteredThreads;
		}
};

typedef CThreadImplWindows CThreadImpl;
typedef DWORD TThreadID;

	} // namespace le
} // namespace sokira
