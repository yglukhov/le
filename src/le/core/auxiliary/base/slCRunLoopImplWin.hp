#if !defined SL_LE_core_auxiliary_base_slCRunloopImplWin_hp
#define SL_LE_core_auxiliary_base_slCRunloopImplWin_hp

#include <windows.h>

namespace sokira
{
	namespace le
	{

class CRunLoopImpl
{
	typedef std::map<UINT_PTR, TCFunction<> > TTimerFuncsMap;

	public:
		/// Start the run loop.
		void run()
		{
			MSG msg;
			BOOL result;

			while (result = GetMessage(&msg, NULL, 0, 0))
			{
				if (result == -1)
				{
					std::cout << "Run loop error: " << GetLastError() << std::endl;
				}
				else
				{
					//std::map<DWORD, std::string>::iterator it = messageNames.find(msg.message);
					//if (it != messageNames.end())
					//{
					//	std::cout << it->second << std::endl;
					//}
					//else
					//{
					//	std::cout << "Message: " << msg.message << std::endl;
					//}

					if (msg.message == WM_TIMER && msg.hwnd == NULL)
					{
						TTimerFuncsMap::iterator it = mTimerFuncs.find((UINT_PTR)msg.wParam);
						if (it != mTimerFuncs.end())
						{
							it->second();
						}
					}
					else
					{
						TranslateMessage(&msg);
						DispatchMessage(&msg);
					}
				}
			}
		}

		/// Stop the run loop.
		void stop()
		{
			PostQuitMessage(0);
		}

		static inline EEventType eventTypeFromMessage(UINT message)
		{
			switch (message)
			{
				case WM_LBUTTONDOWN:
				case WM_RBUTTONDOWN:
				case WM_MBUTTONDOWN:
					return eEventTypeMouseDown;

				case WM_LBUTTONUP:
				case WM_RBUTTONUP:
				case WM_MBUTTONUP:
					return eEventTypeMouseUp;

				case WM_MOUSEMOVE:
					return eEventTypeMouseMove;
			}

			return eEventTypeUnknown;
		}

		static inline EKeyCode mouseButtonForMessage(UINT message)
		{
			switch (message)
			{
				case WM_LBUTTONDOWN:
				case WM_LBUTTONUP:
					return eKeyCodeMouseButtonPrimary;

				case WM_RBUTTONDOWN:
				case WM_RBUTTONUP:
					return eKeyCodeMouseButtonSecondary;

				case WM_MBUTTONDOWN:
				case WM_MBUTTONUP:
					return eKeyCodeMouseButtonOther;
			}

			return eKeyCodeUnknown;
		}

		static inline EKeyCode keyCodeFromSystemCode(int code)
		{
			switch(code)
			{
				case 0x30: return eKeyCodeAnsi0;
				case 0x31: return eKeyCodeAnsi1;
				case 0x32: return eKeyCodeAnsi2;
				case 0x33: return eKeyCodeAnsi3;
				case 0x34: return eKeyCodeAnsi4;
				case 0x35: return eKeyCodeAnsi5;
				case 0x36: return eKeyCodeAnsi6;
				case 0x37: return eKeyCodeAnsi7;
				case 0x38: return eKeyCodeAnsi8;
				case 0x39: return eKeyCodeAnsi9;

				case 0x41: return eKeyCodeAnsiA;
				case 0x42: return eKeyCodeAnsiB;
				case 0x43: return eKeyCodeAnsiC;
				case 0x44: return eKeyCodeAnsiD;
				case 0x45: return eKeyCodeAnsiE;
				case 0x46: return eKeyCodeAnsiF;
				case 0x47: return eKeyCodeAnsiG;
				case 0x48: return eKeyCodeAnsiH;
				case 0x49: return eKeyCodeAnsiI;
				case 0x4A: return eKeyCodeAnsiJ;
				case 0x4B: return eKeyCodeAnsiK;
				case 0x4C: return eKeyCodeAnsiL;
				case 0x4D: return eKeyCodeAnsiM;
				case 0x4E: return eKeyCodeAnsiN;
				case 0x4F: return eKeyCodeAnsiO;
				case 0x50: return eKeyCodeAnsiP;
				case 0x51: return eKeyCodeAnsiQ;
				case 0x52: return eKeyCodeAnsiR;
				case 0x53: return eKeyCodeAnsiS;
				case 0x54: return eKeyCodeAnsiT;
				case 0x55: return eKeyCodeAnsiU;
				case 0x56: return eKeyCodeAnsiV;
				case 0x57: return eKeyCodeAnsiW;
				case 0x58: return eKeyCodeAnsiX;
				case 0x59: return eKeyCodeAnsiY;
				case 0x5A: return eKeyCodeAnsiZ;

				case VK_SPACE: return eKeyCodeSpace;
				case VK_ESCAPE: return eKeyCodeEscape;
				case VK_TAB: return eKeyCodeTab;
				case VK_PRIOR: return eKeyCodePageUp;
				case VK_NEXT: return eKeyCodePageDown;
				case VK_END: return eKeyCodeEnd;
				case VK_HOME: return eKeyCodeHome;

				case VK_LEFT: return eKeyCodeLeftArrow;
				case VK_RIGHT: return eKeyCodeRightArrow;
				case VK_UP: return eKeyCodeUpArrow;
				case VK_DOWN: return eKeyCodeDownArrow;

				case VK_NUMPAD0: return eKeyCodeAnsiKeypad0;
				case VK_NUMPAD1: return eKeyCodeAnsiKeypad1;
				case VK_NUMPAD2: return eKeyCodeAnsiKeypad2;
				case VK_NUMPAD3: return eKeyCodeAnsiKeypad3;
				case VK_NUMPAD4: return eKeyCodeAnsiKeypad4;
				case VK_NUMPAD5: return eKeyCodeAnsiKeypad5;
				case VK_NUMPAD6: return eKeyCodeAnsiKeypad6;
				case VK_NUMPAD7: return eKeyCodeAnsiKeypad7;
				case VK_NUMPAD8: return eKeyCodeAnsiKeypad8;
				case VK_NUMPAD9: return eKeyCodeAnsiKeypad9;

				case VK_MULTIPLY: return eKeyCodeAnsiKeypadMultiply;
				case VK_ADD: return eKeyCodeAnsiKeypadAdd;
				case VK_DIVIDE: return eKeyCodeAnsiKeypadDivide;
				case VK_SUBTRACT: return eKeyCodeAnsiKeypadSubtract;
				case VK_DECIMAL: return eKeyCodeAnsiKeypadDecimal;
				case VK_SEPARATOR: return eKeyCodeAnsiKeypadEquals;
			}

			return eKeyCodeUnknown;
		}

		/// Get next event. Can be used in a loop.
		/// @param mask some param
		CEvent nextEventMatchingMask(UInt32 mask)
		{
			MSG msg;
			BOOL result;
			CEvent event;

			while (result = GetMessage(&msg, NULL, 0, 0))
			{
				if (result == -1)
				{
					std::cout << "Run loop error: " << GetLastError() << std::endl;
				}
				else
				{
					if (msg.message == WM_TIMER && msg.hwnd == NULL)
					{
						TTimerFuncsMap::iterator it = mTimerFuncs.find((UINT_PTR)msg.wParam);
						if (it != mTimerFuncs.end())
						{
							it->second();
						}
					}
					else
					{
						EEventType type = eventTypeFromMessage(msg.message);

						if (type & mask)
						{
							if (type & (eEventTypeMouseDown | eEventTypeMouseUp | eEventTypeMouseMove))
							{
								POINTS point = MAKEPOINTS(msg.lParam);
								event = CEvent(type, CPoint2D(point.x, point.y),(type == eEventTypeMouseDown) ? eButtonStateDown : ((type == eEventTypeMouseUp) ? eButtonStateUp : eButtonStateUnknown), mouseButtonForMessage(msg.message));
							}
							else if (type & (eEventTypeKeyDown | eEventTypeKeyUp))
							{
								event = CEvent(type, keyCodeFromSystemCode(msg.wParam), (msg.message == WM_KEYDOWN) ? eButtonStateDown : eButtonStateUp);
							}

							break;
						}
						else
						{
							TranslateMessage(&msg);
							DispatchMessage(&msg);
						}
					}
				}
			}

			return event;
		}

		CTimer scheduledTimerWithInterval(UInt32 msInterval, TCFunction<> timerFunc)
		{
			UINT_PTR newTimer = SetTimer(NULL, NULL, msInterval, NULL);
			CTimer result;
			result.mTimerRef = (UInt64)newTimer;
			if (newTimer)
			{
				mTimerFuncs.insert(std::make_pair(newTimer, timerFunc));
			}
			else
			{
				std::cout << "Error: could not create timer" << std::endl;
			}
			return result;
		}

		private:
			TTimerFuncsMap mTimerFuncs;
};

	} // namespace le
} // namespace sokira

#endif // not defined SL_LE_core_auxiliary_base_slCRunloopImplWin_hp
