#if !defined SL_LE_core_base_slCImageImpl_hp
#define SL_LE_core_base_slCImageImpl_hp

//#include <vector>
#include <le/core/slCObject.h>
#include <le/core/slCResult.h>
#include <le/core/slCImageFrame.h>

namespace sokira
{
	namespace le
	{

class CImageImpl : public CObject
{
	LE_RTTI_BEGIN
		LE_RTTI_SELF(CImageImpl)
		LE_RTTI_SINGLE_PUBLIC_PARENT
	LE_RTTI_END

	public:
		UInt32 frameCount() const
		{
			return mFrames.size();
		}

		CImageFrame frameAtIndex(UInt32 index) const
		{
			return (index <= mFrames.size())?(mFrames[index]):(CImageFrame());
		}

		void insertFrame(UInt32 position, const CImageFrame& frame)
		{
			mFrames.insert(mFrames.begin() + position, frame);
		}

		virtual CResult loadFromStream(std::istream& stream)
		{
			LE_ASSERT(false);
			return false;
		}

	private:
		std::vector<CImageFrame> mFrames;
};

	} // namespace le
} // namespace sokira

#endif // not defined SL_LE_core_base_slCImageImpl_hp
