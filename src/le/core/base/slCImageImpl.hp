#if !defined SL_LE_core_base_slCImageImpl_hp
#define SL_LE_core_base_slCImageImpl_hp

#include <vector>
#include <le/core/strategies/slCSimpleRefCountable.h>
#include <le/core/slCImageFrame.h>

namespace sokira
{
	namespace le
	{

class CImageImpl : public CSimpleRefCountable
{
	public:
		UInt32 frameCount() const
		{
			return mFrames.size();
		}

		CImageFrame frameAtIndex(UInt32 index) const
		{		
			return (index <= mFrames.size())?(mFrames[index]):(CImageFrame());
		}

		void insertFrame(UInt32 position, const CImageFrame& frame)
		{
			mFrames.insert(mFrames.begin() + position, frame);
		}

	private:
		std::vector<CImageFrame> mFrames;
};

	} // namespace le
} // namespace sokira

#endif // not defined SL_LE_core_base_slCImageImpl_hp
